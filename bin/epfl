import argparse
import logging
logging.basicConfig(level=logging.WARN)

from epflmanager.commands import CourseCommands, Schedule
from epflmanager.io import ConsoleManager, CourseHandler, SemesterNotFound
import epflmanager.components as components
import epflmanager.config as config

ConsoleManager()  # Create the console component

def config_initializer(func):
    def intercept_args(args): # args are those provided by argparser
        conf_file = args.config if args.config else config.default_config_file()
        conf = config.read_config_file(conf_file)
        components.as_component(conf, "Config") # Configuration initialization
        CourseHandler() # Create the file&directory handler

        args.semester = find_semester(args.semester)

        return func(args)

    return intercept_args

wrap = config_initializer

def find_semester(semester_name):
    ch = components.get("CourseHandler")
    if semester_name is not None:
        return ch.get_semester(semester_name)
    else:
        return ch.latest_semester()


# Check ref https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument
parser = argparse.ArgumentParser(description='Manage EPFL courses')
parser.add_argument("--config"
                    , action='store'
                    , default=None
                    , type=str
                    , nargs="?")
parser.add_argument("--semester"
                    , action='store'
                    , default=None
                    , type=str
                    , nargs="?")

subparsers = parser.add_subparsers()
open_parser = subparsers.add_parser("open", aliases=["o"])
open_parser.add_argument("course")
open_parser.add_argument("target", default="site", nargs="?")
open_parser.set_defaults(func=wrap(CourseCommands.go_to_url))

horaire = subparsers.add_parser("schedule", aliases=["s"])
horaire.set_defaults(func=wrap(Schedule.show))

courses = subparsers.add_parser("courses", aliases=["c"])
courses.set_defaults(func=wrap(CourseCommands.listing))

action_subparsers = courses.add_subparsers(help='action help')
show_parser = action_subparsers.add_parser("list")

add_parser = action_subparsers.add_parser("add")
add_parser.set_defaults(func=wrap(CourseCommands.add))

parser.set_defaults(func=wrap(CourseCommands.listing))

try:
    args = parser.parse_args()
    args.func(args)
except SemesterNotFound:
    components.get("Console").error("Semester not found")
